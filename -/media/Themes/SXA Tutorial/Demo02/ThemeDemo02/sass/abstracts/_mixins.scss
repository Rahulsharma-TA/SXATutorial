@import "vars";
/* breakpoints */

$break-desktop: 960px;
$break-mobile: 380px;
$break-mobile-horizontal: 640px;
$break-mobile-large: 786px;
@mixin wrapper() {
    max-width: 960px;
    margin: 0 auto !important;
}

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

@mixin opensans-font-stack() {
    font-family: "Open Sans", Helvetica, Verdana, Tahoma, sans-serif;
}

@mixin loading-gif() {
    background-image: url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMiAzMiIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiBmaWxsPSJibGFjayI+DQogIDxwYXRoICBvcGFjaXR5PSIuMjUiIGQ9Ik0xNiAwIEExNiAxNiAwIDAgMCAxNiAzMiBBMTYgMTYgMCAwIDAgMTYgMCBNMTYgNCBBMTIgMTIgMCAwIDEgMTYgMjggQTEyIDEyIDAgMCAxIDE2IDQiLz4NCiAgPHBhdGggZmlsbD0nIzFhODBiNicgZD0iTTE2IDAgQTE2IDE2IDAgMCAxIDMyIDE2IEwyOCAxNiBBMTIgMTIgMCAwIDAgMTYgNHoiPg0KICAgIDxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0icm90YXRlIiBmcm9tPSIwIDE2IDE2IiB0bz0iMzYwIDE2IDE2IiBkdXI9IjAuOHMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIiAvPg0KICA8L3BhdGg+DQo8L3N2Zz4NCg==);
    background-position: center center;
    background-repeat: no-repeat;
}

@mixin respond-to($media) {
    @if $media==mobile {
        @media only screen and (max-width: $break-mobile) {
            @content;
        }
    }
    @else if $media==mobile-horizontal {
        @media only screen and (max-width: $break-mobile-horizontal - 1) {
            @content;
        }
    }
    @else if $media==mobile-large {
        @media only screen and (max-width: $break-mobile-large) {
            @content;
        }
    }
    @else if $media==tablet {
        @media only screen and (min-width: $break-mobile + 1) and (max-width: $break-desktop - 1) {
            @content;
        }
    }
    @else if $media==all-mobile {
        @media only screen and (max-width: $break-desktop - 1) {
            @content;
        }
    }
    @else if $media==desktop {
        @media only screen and (min-width: $break-desktop) {
            @content;
        }
    }
}

@mixin basic-border( $position: all, $border-color: $default-border, $border-width: 1px, $size: small) {
    //border-image:url('../images/border-#{$size}.png') 10% repeat repeat;
    @if ($position !=all) {
        border-#{$position}-width: $border-width;
        border-#{$position}-style: solid;
        border-#{$position}-color: $border-color;
    }
    @else {
        border-width: $border-width;
        border-style: solid;
        border-color: $border-color;
    }
}

@mixin fixed-bg($pos, $min-height: 240px) {
    background-position: $pos;
    background-attachment: fixed;
    min-height: $min-height;
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient( legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

//for wireframe
@mixin balsamiq-border( $size: small, $percent: 10%, $style: repeat, $border-width: 25px, $border-image-slice: auto) {
    border-image: url("../images/border-#{$size}.png") $percent $style $style;
    border-image-slice: $border-image-slice;
    border-width: $border-width;
    border-style: solid; //firefox issue fix
    //provide fallback - modernizr class
    .no-borderimage & {
        border: 2px solid $border-basic-color;
    }
}

@mixin balsamiq-line($where: top) {
    background: url("../images/balsamiq_line.png") $where left repeat-x;
    .lt-ie9 & {
        background: none;
        border-#{$where}: 2px solid $border-basic-color;
    }
}

@mixin basic-font($important: null) {
    font-family: "Open Sans", Helvetica, Verdana, Tahoma, sans-serif $important;
}

@mixin basic-padding($values: 15px) {
    $length: length($values);
    $top: nth($values, 1);
    $right: $top;
    $bottom: $top;
    $left: $top;
    @if $length==2 {
        $right: nth($values, 2);
        $left: $right;
    }
    @else if $length==3 {
        $right: nth($values, 2);
        $bottom: nth($values, 3);
        $left: $right;
    }
    @else if $length>=4 {
        $right: nth($values, 2);
        $bottom: nth($values, 3);
        $left: nth($values, 4);
    }
    padding: $top $right $bottom $left;
}

@mixin basic-styles( $bg-color: $default-bg,
$color: $default-color,
$border-radius: 5px) {
    background-color: $bg-color;
    color: $color;
    border-radius: $border-radius;
}